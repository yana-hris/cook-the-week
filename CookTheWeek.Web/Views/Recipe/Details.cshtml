@using CookTheWeek.Services.Data.Interfaces
@using CookTheWeek.Web.Infrastructure.Extensions
@using static CookTheWeek.Common.HelperMethods.IngredientHelper;
@model RecipeDetailsViewModel
@inject IFavouriteRecipeService FavouriteRecipeService
@inject IUserService UserService
@{
    string userId = User.GetId();
    bool isAdmin = User.IsAdmin();
    string recipeId = Model.Id;
    bool isOwner = await this.UserService.IsOwnerByRecipeIdAsync(recipeId, userId);
    bool isLiked = await this.FavouriteRecipeService.ExistsByUserIdAsync(recipeId, userId);

    var headingModel = new PageHeadingViewModel
    {
        Subheading = "Recipe Details",
        HeadingSecondary = Model.Title
    };
}

<div id="recipe-details-container" class="card-outer-container">    
    <partial name="_HeadingPartial" model="headingModel"/>
    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item"><a class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="true">Info</a></li>
                <li class="nav-item"><a class="nav-link" id="ingredients-tab" data-bs-toggle="tab" data-bs-target="#ingredients" type="button" role="tab" aria-controls="ingredients" aria-selected="false">Ingredients</a></li>
                <li class="nav-item"><a class="nav-link" id="instructions-tab" data-bs-toggle="tab" data-bs-target="#instructions" type="button" role="tab" aria-controls="instructions" aria-selected="false">Instructions</a></li>
            </ul>
            <partial name="_BackBtnPartial"/>
        </div>

        <div class="card-body p-4 d-md-grid" id="recipe-details">
            <div id="info-content" class="tab-content g-3">
                <div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
                    <div class="row g-3">
                        <div class="col col col-md-8 img-container">
                            <img class="img-fluid image" alt="Recipe Image" src="@Model.ImageUrl">
                            @if(!isOwner){
                                <a class="add-to-favourites-button" onclick="toggleFavourites(event, '@recipeId', '@userId')">
                                    @if (isLiked)
                                    {
                                        <i class="fas fa-heart liked-icon" data-toggle="tooltip" title="Remove from Favorites"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-heart not-liked-icon" data-toggle="tooltip" title="Add to Favorites"></i>
                                    }
                                </a>
                            }
                            else
                            {
                                <i class="fa fa-user-circle" aria-hidden="true" data-toggle="tooltip" title="You own this Recipe"></i>
                            }
                            @if(userId != String.Empty)
                            {
                                <div class="add-to-mealplan-container">
                                    <a data-recipeId="@Model.Id" class="plus fixed-size-btn btn btn-icon-only">
                                        <i class="fa fa-plus" aria-hidden="true"></i>
                                    </a>
                                </div>
                            }                           
                        </div>
                        <div class="col col-12 col-md-4">
                            <ul class="list-group">
                                <li class="list-group-item list-item-style">
                                    <i class="fa-solid fa-utensils"></i>
                                    <span>&nbsp;&nbsp;&nbsp;@Model.Servings Serving(s)</span>
                                </li>
                                <li class="list-group-item list-item-style">
                                    <i class="fa-solid fa-clock"></i>
                                    <span>&nbsp;&nbsp;&nbsp;@(Model.TotalTime.Hours > 0 ? Model.TotalTime.Hours.ToString() + "h " : "")@(Model.TotalTime.Minutes > 0 ? Model.TotalTime.Minutes.ToString() + " min" : "")</span>
                                </li>
                                <li class="list-group-item list-item-style">
                                    <i class="fas fa-tag"></i>
                                    <span>&nbsp;&nbsp;&nbsp;@Model.CategoryName</span>
                                </li>
                                <li class="list-group-item list-item-style">
                                    <i class="fa fa-archive" aria-hidden="true"></i>
                                    <span>&nbsp;&nbsp;&nbsp;Created:&nbsp;@Model.CreatedOn</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row g-3 pt-2">
                        <div class="col col-12 col-md-8">
                            <p class="recipe-description">@Model.Description</p>
                        </div>                              
                    </div>
                    
                </div>
                <div id="ingredients" class="tab-pane fade">
                    <div class="row g-3">
                        
                        @if (Model.DiaryMeatSeafood.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Meat, Diary Products &amp; Seafood</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.DiaryMeatSeafood)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (Model.Produce.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Produce (Fruit &amp; Vegetables)</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.Produce)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (Model.PastaGrainsBakery.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Pasta, Grains &amp; Bakery</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.PastaGrainsBakery)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (Model.Legumes.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Beans, Lentils and Legumes</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.Legumes)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (Model.NutsSeedsAndOthers.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Nuts, Seeds &amp; Others</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.NutsSeedsAndOthers)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (@Model.OilsHerbsSpicesSweeteners.Any())
                        {
                            <div class="col col-12 col-sm-6 col-lg-4">
                                <p class="ingredient-heading">Herbs, Spices, Oils &amp; Sauces</p>
                                <ul class="list-unstyled">
                                    @foreach (var item in Model.OilsHerbsSpicesSweeteners)
                                    {
                                        <li>@Html.Raw(FormatIngredientQty(@item.Qty)) <span class="units-styler">@item.Measure</span> @item.Name <span class="units-styler">@item.Specification</span></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
                <div id="instructions" class="tab-pane fade" role="tabpanel" aria-labelledby="instructions-tab">
                    <div class="row">
                        <div class="col">
                           @for (int i = 0; i < Model.Steps.Count; i++)
                            {
                                string currentStepText = Model.Steps[i].Description;
                                <div class="row mb-4 align-items-start">
                                    @if (i > 0)
                                    {
                                        <hr class="steps-delimeter" />
                                    }
                                    <div class="col-auto align-self-start">
                                        <div class="step-number">@(i + 1)</div>
                                    </div>
                                    <div class="col align-self-start">@currentStepText</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (isAdmin || isOwner)
        {
         <div class="card-footer">
            <div class="col text-center">
                <div class="buttons">
                    <a asp-area="" asp-controller="Recipe" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-secondary card-btn-width text-center" type="button">
                        Edit
                    </a>
                    <button data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" data-recipe-id="@Model.Id" class="btn btn-danger text-center card-btn-width" type="button">
                        Delete
                    </button>
                </div>
            </div>
        </div>
        }       
    </div>
    <partial name="_BuildBtnPartial" />
    <!-- Modal HTML -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">               
                <div class="modal-body d-flex flex-column aling-items-center justify-content-center gap-2">
                    <span><i class="fa-solid fa-triangle-exclamation"></i></span>
                    <h2>Are you sure?</h2>
                    <p>This action cannot be undone. </p>       
                    <div class="buttons d-flex flex-column gap-2">
                        <a asp-area="" asp-controller="Recipe" asp-action="DeleteConfirmed" asp-route-id="@Model.Id" class="btn btn-danger w-100 text-center">
                            Delete
                        </a>
                        <button type="button" class="btn btn-light w-100 text-center" data-bs-dismiss="modal">Cancel</button>                        
                    </div>
                </div>                
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Like btn functionality
        function toggleFavourites(event, recipeId, userId) {
            event.preventDefault();
            var $button = $(event.currentTarget);
            let url = 'https://localhost:7279/api/favouriteRecipe/toggleFavourites';

            var data = {
                RecipeId: recipeId,
                UserId: userId
            }

            $.ajax({
                url: url,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    // Handle success response

                    $button.find('i').toggleClass('liked-icon not-liked-icon');
                    var isLiked = $button.find('i').hasClass('liked-icon');
                    var newTitle = isLiked ? 'Remove from Favorites' : 'Add to Favorites';

                    $button.find('i').attr('title', newTitle)
                        .tooltip('dispose') // Dispose of the current tooltip
                        .tooltip();

                    toastr.success("Your preference is saved!");
                },
                error: function (xhr, status, error) {
                    // Handle error
                    if (xhr.status === 400) {
                        // Handle 400 Bad Request error
                        toastr.error('Bad Request: Please check your input and try again.');
                    } else {
                        // Display generic error message
                        toastr.error('Your preference not saved:', error);
                    }
                }
            });
        }
    </script>  
    <script>
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            $('#backBtn').click(function (event) {
                event.preventDefault(); // Prevent the default action

                // Check if the referrer is the edit view page with an ID in the URL
                var referrer = document.referrer;
                var editViewPattern = /^https:\/\/localhost:7170\/Recipe\/Edit\/[0-9a-fA-F-]+$/;
                var addViewPattern = /^https:\/\/localhost:7170\/Recipe\/Add$/;

                if (referrer) {
                    if (editViewPattern.test(referrer)) {
                        // If the referrer matches the edit view pattern, go back three steps (to TargetView(-3) <-Details(-2) <-Edit(-1) <-Details(current view))
                        window.history.go(-3);
                    } else if (addViewPattern.test(referrer)) {
                        // If the referrer matches the add view pattern, go back two steps (to TargetView(-2) <-Add(-1) <-Details(current view))
                        window.history.go(-2);
                    } else {
                        // Otherwise, just go back one step
                        window.history.back();
                    }
                } else {
                    // If there's no referrer, just go back one step
                    window.history.back();
                }
            });
        });
    </script>
}