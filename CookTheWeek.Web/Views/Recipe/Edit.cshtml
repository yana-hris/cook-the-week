@using Newtonsoft.Json
@model RecipeEditFormModel
@using static CookTheWeek.Common.GeneralApplicationConstants;
@using static CookTheWeek.Common.EntityValidationConstants.Recipe;
@using static CookTheWeek.Common.EntityValidationConstants.Step;
@using static CookTheWeek.Common.EntityValidationConstants.RecipeIngredient;
@using static CookTheWeek.Common.EntityValidationConstants.RecipeIngredientQty;
@{
    ViewData["Title"] = "Edit Recipe";
    
    var headingModel = new PageHeadingViewModel
    {
        Subheading = ViewData["Title"]!.ToString(),

    };

    if (User.GetId() != string.Empty && !User.IsAdmin())
    {
        headingModel.HeadingSecondary = $"Edit \"{Model.Title}\"";
    }

    var qtyFractionOptions = JsonConvert.SerializeObject(QtyFractionOptions);

    var errorMessages = new Dictionary<string, string>
    {
        { "MissingFormInputErrorMessage", MissingFormInputErrorMessage },
        { "MissingFractionalOrWholeInputMessage", MissingFractionalOrWholeInputMessage },
        { "InvalidDecimalRangeErrorMessage", InvalidDecimalRangeErrorMessage },
        { "InvalidFractionErrorMessage", InvalidFractionErrorMessage },
        { "InvalidWholeQtyErrorMessage", InvalidWholeQtyErrorMessage },
    };
}
<div id="edit-recipe" class="card-container">
    <partial name="_HeadingPartial" model="headingModel" />
    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="recipe" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="true">Recipe Details</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="ingredients-tab" data-bs-toggle="tab" data-bs-target="#ingredients" type="button" role="tab" aria-controls="ingredients" aria-selected="false">Ingredients</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="instructions-tab" data-bs-toggle="tab" data-bs-target="#instructions" type="button" role="tab" aria-controls="instructions" aria-selected="false">Instructions</button>
                </li>
            </ul>
        </div>

        <div class="card-body">
            <form id="edit-recipe-form">
                <input 
                    type="hidden" 
                    id="jsonData" 
                    name="jsonData" 
                />
               
                <div id="info-content" class="tab-content g-3">
                    <!-- TAB RECIPE DETAILS -->
                    <div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
                        <div class="row">
                            <div class="col col-12 col-md-8 col-xl-9 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Title</span>
                                    <input 
                                        data-bind="value: Title, valueUpdate: 'afterkeydown'"
                                        class="form-control" 
                                        placeholder="Name it.." 
                                        type="text"
                                    />
                                </div>
                                <span 
                                    class="small text-danger"
                                      data-bind="text: Title.error"></span>
                            </div>
                            <div class="col col-12 col-md-4 col-xl-3 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Servs</span>
                                    <select data-bind="value: Servings, valueUpdate: 'afterkeydown'"
                                        class="form-select" 
                                    >
                                        <option value="">Choose</option>
                                        @foreach (var option in @Model.ServingsOptions!)
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    </select>
                                </div>
                                <span 
                                    data-bind="text: Servings.error"
                                    class="small text-danger"
                                ></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-7 col-xl-8 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Description</span>
                                    <textarea 
                                        data-bind="value: Description, valueUpdate: 'afterkeydown'"
                                        rows="3" 
                                        class="form-control" 
                                        placeholder="Would be great to know more about this recipe.."
                                    ></textarea>
                                </div>
                                <span 
                                    class="small text-danger"
                                    data-bind="text: Description.error"
                                ></span>
                            </div>
                            <div class="col col-12 col-md-5 col-xl-4 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Ready For</span>
                                    <input 
                                        data-bind="value: CookingTimeMinutes, valueUpdate: 'afterkeydown'" 
                                        class="form-control" 
                                        placeholder="minutes"
                                        type="number"
                                    />
                                </div>
                                <span 
                                    data-bind="text: CookingTimeMinutes.error"
                                    class="small text-danger"
                                ></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-6 col-xl-7 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Image URL</span>
                                    <input 
                                        data-bind="value: ImageUrl, valueUpdate: 'afterkeydown'" 
                                        class="form-control" 
                                        placeholder="Your image link here..." 
                                        type="url"
                                    />
                                </div>
                                <span 
                                    data-bind="text: ImageUrl.error"
                                    class="small text-danger"
                                ></span>
                            </div>
                            <div class="col col-12 col-md-6 col-xl-5 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Meal Type</span>
                                    <select 
                                        data-bind="value: RecipeCategoryId, valueUpdate: 'afterkeydown'" 
                                        class="form-select"
                                    >
                                        <option value="">Choose</option>
                                        @foreach (var category in @Model.Categories!)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </select>
                                </div>
                                <span 
                                    data-bind="text: RecipeCategoryId.error"
                                    class="small text-danger"
                                ></span>
                            </div>

                        </div>
                    </div>
                    <!-- TAB INSTRUCTIONS - ICOLLECTION OF STEPS -->
                    <div class="tab-pane fade" id="instructions" role="tabpanel" aria-labelledby="instructions-tab">
                        <div id="instructions-content" class="tab-content">
                            <div id="instructionsContainer" class="row g-3">
                                <div id="instructionsList" data-bind="foreach: Steps">
                                    <div class="row instructions-row align-items-center">
                                        <div class="col-11 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Step</span>
                                                <textarea 
                                                    data-val="true"
                                                    data-bind="value: Description, 
                                                               deferValidation: Description,
                                                               valueUpdate: 'afterkeydown'"
                                                    class="form-control" 
                                                    rows="3" 
                                                    placeholder="Tell us how to cook.."
                                                ></textarea>
                                            </div>
                                            <span data-bind="validationMessage: Description"
                                                class="small text-danger"
                                            ></span> 
                                        </div>
                                        <div class="col-1 p-2">
                                            <div class="add-step-btn-container d-flex justify-content-center align-items-top adjust-btn-position">
                                                <button class="btn remove-btn btn-danger remove-step" type="button" data-bind="click: $parent.removeStep">
                                                    <i class="fa fa-minus" aria-hidden="true"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                   
                                </div>
                                <hr />
                                <!-- Add Step Btn -->
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a id="add-step" class="btn btn-outline-primary" type="button" data-bind="click: addStep">
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Step
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- TAB RECIPE INGREDIENTS -->
                    <div class="tab-pane fade" id="ingredients" role="tabpanel" aria-labelledby="ingredients-tab">
                        <div id="ingredients-content" class="tab-content">
                            <div id="ingredientsContainer" class="row g-3">
                                <div id="ingredientList" data-bind="foreach: RecipeIngredients">
                                    <!-- USING KNOCKOUTJS DATA BINDING -->
                                    <div class="row ingredient-row">
                                        <div class="col col-6 col-lg-4 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Ingredient</span>
                                                <input data-bind="value: Name, deferValidation: Name, 
                                                                  validationElement: Name, 
                                                                  valueUpdate: 'afterkeydown', 
                                                                  validationRules: {
                                                                        required: {
                                                                            message: '@RecipeIngredientNameRequiredErrorMessage'
                                                                        },
                                                                        minLength: {
                                                                            message: '@RecipeIngredientNameRangeErrorMessage',
                                                                            params: parseInt('@RecipeIngredientNameMinLength', 10)
                                                                        },
                                                                        maxLength: {
                                                                            message: '@RecipeIngredientNameRangeErrorMessage',
                                                                            params: parseInt('@RecipeIngredientNameMaxLength', 10)
                                                                        }
                                                                    }"
                                                       class="form-control ingredientName" 
                                                       type="text" 
                                                       autocomplete="off" 
                                                />
                                                <div class="suggestionsList invisible">
                                                </div>
                                            </div>
                                            <span 
                                                data-bind="validationMessage: Name"
                                                class="small text-danger"
                                            ></span>
                                        </div>
                                        <!-- COMPLEX QUANTITY INPUT -->
                                        <div class="col col-6 col-lg-3 p-2 qty-row">

                                            <!--  DECIMAL INPUT -->
                                            <div class="decimal-qty-input input-group" data-bind="style: { display: isUsingFractionsForIngredient() ? 'none' : 'flex' }">
                                                <span class="input-group-text">Qty</span>
                                                <input type="number"  
                                                       data-bind="value: Qty().QtyDecimal, 
                                                                  deferValidation: Qty().QtyDecimal, 
                                                                  validationElement: Qty().QtyDecimal, 
                                                                  valueUpdate: 'afterkeydown',
                                                                  validationRules: {
                                                                        validateqty: {
                                                                                params: {
                                                                                    errorMessage: ko.observable('')
                                                                                }
                                                                            }
                                                                        }"
                                                       class="form-control qty-decimal"
                                                       placeholder="0.00" />
                                            </div>
                                            <span 
                                                data-bind="validationMessage: Qty().QtyDecimal" 
                                                class="text-danger small"
                                            ></span>
                                            <!-- FRACTIONAL / WHOLE NUMBER INPUT -->
                                            <div 
                                                data-bind="style: { display: isUsingFractionsForIngredient() ? 'flex' : 'none' }"
                                                class="fraction-qty-inputs input-group" 
                                            >
                                                <span class="input-group-text">Qty</span>
                                                <input type="number"   
                                                       data-bind="value: Qty().QtyWhole, 
                                                                  deferValidation: Qty().QtyDecimal,
                                                                  validationElement: Qty().QtyDecimal,
                                                                  valueUpdate: 'afterkeydown',
                                                                  validationRules: {
                                                                        validateqty: {
                                                                                params: {
                                                                                    errorMessage: ko.observable('')
                                                                                }
                                                                            }
                                                                        }"
                                                       class="form-control qty qty-whole"
                                                       placeholder="0" />
                                                <select data-val="true"
                                                        data-bind="value: Qty().QtyFraction, 
                                                                  deferValidation: Qty().QtyDecimal,
                                                                  validationElement: Qty().QtyDecimal,
                                                                  valueUpdate: 'afterkeydown',
                                                                  validationRules: {
                                                                        validateqty: {
                                                                                params: {
                                                                                    errorMessage: ko.observable('')
                                                                                }
                                                                            }
                                                                        }"
                                                        class="form-select qty qty-fraction">
                                                    <option value="">Frac</option>
                                                    @foreach (var option in QtyFractionOptions)
                                                    {
                                                        <option value="@option.Key">@option.Key</option>
                                                    }
                                                </select>
                                            </div>                                                
                                            <span 
                                                data-bind="text: Qty.error || Qty.QtyWhole.error || Qty.QtyFraction.error"
                                                class="small text-danger"
                                            ></span>
                                            
                                            <!-- INPUT SWITCHER -->
                                            <div class="form-check form-switch">
                                                <input 
                                                    data-bind="checked: isUsingFractionsForIngredient"
                                                    class="form-check-input show-fraction-checkbox" 
                                                    type="checkbox" 
                                                />
                                                <label class="form-check-label">Use Fractions</label>
                                            </div>                                               
                                        </div>

                                        <div class="col col-5 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Unit</span>
                                                <select data-bind="value: MeasureId, 
                                                                   validationElement: MeasureId, 
                                                                   deferValidation: MeasureId, 
                                                                   valueUpdate: 'afterkeydown',
                                                                   validationRules: {
                                                                                required: {
                                                                                    message: '@MeasureRequiredErrorMessage'
                                                                                }
                                                                            }"
                                                    class="form-select"
                                                >
                                                    <option value="">Unit</option>
                                                    @foreach (var measure in @Model.RecipeIngredients!.First().Measures!)
                                                    {
                                                        <option value="@measure.Id">@measure.Name</option>
                                                    }
                                                </select>
                                            </div>
                                            <span 
                                                data-bind="validationMessage: MeasureId"
                                                class="small text-danger"
                                            ></span>
                                        </div>
                                        <div class="col col-6 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Note</span>
                                                <select 
                                                    data-bind="value: SpecificationId, valueUpdate: 'afterkeydown'"
                                                    class="form-select" 
                                                >
                                                    <option value="">Type</option>
                                                    @foreach (var specification in Model.RecipeIngredients!.First().Specifications!)
                                                    {
                                                        <option value="@specification.Id">@specification.Description</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col col-1 p-2 d-flex justify-content-center align-items-top adjust-btn-position">
                                            <a 
                                                data-bind="click: $parent.removeIngredient" 
                                                class="btn remove-btn btn-danger remove-ingredient" 
                                                type="button"
                                            >
                                                <i class="fa fa-minus" aria-hidden="true"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <hr>
                                </div>
                                <!-- Add Ingredient Btn -->
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a 
                                            data-bind="click: addIngredient" 
                                            id="add-ingredient" 
                                            class="btn btn-outline-primary" 
                                            type="button"
                                        >
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Ingredient
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col text-center pt-3 pb-2">
                    <!-- SUBMIT FORM BTN -->
                    <button 
                        data-bind="click: submitForm" 
                        class="btn btn-success btn-lg" 
                        form="edit-recipe-form" 
                        type="submit" 
                    >Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout-latest.min.js" integrity="sha512-vs7+jbztHoMto5Yd/yinM4/y2DOkPLt0fATcN+j+G4ANY2z4faIzZIOMkpBmWdcxt+596FemCh9M18NUJTZwvw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js" integrity="sha512-1LyBPWtezbX0LO4X4QzhfZd9jSetVu5W0IFpMV9ecq4lJUQBR6hx8uiNfUI2Aoe7LCF4rK1NV3rY+uil4VJ3QQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout-validation/2.0.4/knockout.validation.min.js" integrity="sha512-b99MDNv5TqiZtPKH2UeHzDAVydmgrOJEPtaPPEF8AgV86eYyqINFI/K7/7f0+R4WNTAVv8KvvpjwfOYHv5rd5g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="~/js/custom-validation-methods-and-adapters.js"></script>
    <script>
        $(document).on('keyup', '.ingredientName', suggestWords);
        
        function suggestWords(event) {
            let inputValue = $(this).val();            
            let suggestionsContainer = this.parentNode.querySelector("div.suggestionsList");

            if (inputValue.length > 1) {
                $.ajax({
                    url: 'https://localhost:7279/api/recipeingredient/suggestions',
                    type: "get",
                    data: {
                        input: inputValue
                    },
                    dataType: 'json',
                    success: function (response) {
                        renderSuggestionResults(response, inputValue, suggestionsContainer, event.target);
                    }
                });
            } else {
                $(suggestionsContainer).empty();
            }
        }

        function renderSuggestionResults(results, search, container, inputForm) {
            // delete unordered list from previous search result
            $(container).empty();

            // get properties from input field
            let form_font = window.getComputedStyle(inputForm, null).getPropertyValue('font-size');
            let form_width = inputForm.offsetWidth;

            //set result list to same width less borders
            container.style.width = form_width.toString() + 'px';

            if (results.length > 0) {
                // create ul and set classes
                let ul = document.createElement('UL');
                ul.classList.add('list-group', 'mt-2');

                // create list of results and append to ul
                results.map(function (item) {

                    let a = document.createElement('A');
                    a.classList.add('autocomplete-result', 'list-group-item', 'p-1'); // autocomplete used for init click event, other classes are from bootstrap
                    a.style.fontSize = form_font;
                    a.href = "#";
                    a.setAttribute("id", item.id); // used for click-Event to fill the form

                    // see function below - marked search string in results
                    a.innerHTML = colorResults(item.name, search);

                    // add Eventlistener for chosen renderResults
                    a.addEventListener("click", function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        // get text from list item and set it into reffered form field
                        let ingredientName = item.name;

                        $(inputForm).val(ingredientName).trigger('change');
                        // TODO: add validation for already added ingredients

                        // after a result is chose, make the div with results invisible -> or after changing input content again,
                        // all of childs of current div will be deleted [line 48,49]
                        $(container).empty();
                        container.classList.add('invisible');

                    });
                    ul.append(a);
                });

                // append ul to container and make container visible
                container.append(ul);
                container.classList.remove('invisible');

            }
            else {
                container.classList.add('invisible');

            }
        }
        // create span's with colored marked search strings
        function colorResults(string, search) {
            let splitted = string.toLowerCase().split(search.toLowerCase());

            let sp = []; // array of all spans, created in folling loop
            let start = 0; //start for slicing

            splitted.map(function (element, index) {
                // empty string at the beginning
                if (element == false) {
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
                else if (index + 1 == splitted.length) {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                }
                else {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                    start = start + element.length;
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
            });
            return sp.join('')
        }

    </script>
    <script>
        $(document).ready(function () {            
            
            var form = $("#edit-recipe-form");

            // Parse the QtyFractionOptions from the JSON string
            var qtyFractionOptionsString = @Html.Raw(qtyFractionOptions);
            var qtyFractionOptions = JSON.parse(JSON.stringify(qtyFractionOptionsString));

            // Extract keys from QtyFractionOptions as valid fractions
            var fractionOptions = Object.keys(qtyFractionOptions);
           
            
            // Helper function to convert decimal to whole and fraction
            function decimalToFraction(decimal) {
                let whole = Math.floor(decimal);
                let fraction = decimal - whole;

                if (fraction > 0) {
                    let closestFraction = '';
                    let minDifference = Number.MAX_VALUE;

                    for (const [key, value] of Object.entries(qtyFractionOptions)) {
                        const difference = Math.abs(value - fraction);
                        if (difference < minDifference) {
                            minDifference = difference;
                            closestFraction = key;
                        }
                    }

                    fraction = closestFraction;
                }
                else {
                    fraction = '';
                }

                return { whole, fraction };
            }

            // Helper function to convert whole and fraction to decimal
            function fractionToDecimal(whole, fraction) {
                let fractionValue = qtyFractionOptions[fraction] || 0;
                return parseFloat(whole) + fractionValue;
            }    
           
            // Update fraction and decimal input fields upon "change input units" request
            form.on('change', '.show-fraction-checkbox', function (event) {
               
                var ingredientLine = $(event.target).closest('.ingredient-row');
                var decimalQtyInput = ingredientLine.find('.decimal-qty-input');
                var fractionQtyInputs = ingredientLine.find('.fraction-qty-inputs');

                if ($(event.target).is(':checked')) {
                    // Convert decimal to whole and fraction and update the inputs
                    let decimalValue = parseFloat(decimalQtyInput.find('input').val()) || 0;
                    let { whole, fraction } = decimalToFraction(decimalValue);
                    //decimalQtyInput.find('input').rules('remove');
                    decimalQtyInput.find('input').val('');
                    decimalQtyInput.hide();

                    // Update the fraction input fields and add validation rules
                    fractionQtyInputs.show();
                    fractionQtyInputs.find('.qty-whole').val(whole);
                    fractionQtyInputs.find('.qty-fraction').val(fraction);
                  
                    
                } else {
                    // Convert whole and fraction to decimal and update the input
                    let wholeValue = parseInt(fractionQtyInputs.find('.qty-whole').val()) || 0;
                    let fractionValue = fractionQtyInputs.find('.qty-fraction').val();
                    let decimalValue = fractionToDecimal(wholeValue, fractionValue);

                    // Update the decimal input field
                    decimalQtyInput.show();
                    decimalQtyInput.find('input').val(decimalValue.toFixed(3));
                   
                    fractionQtyInputs.find('input, select').val('');
                    fractionQtyInputs.hide();
                }

                form.valid();
            });
        });
    </script>
    <script>
        var errorMessages = {
            MissingFormInputErrorMessage: '@errorMessages["MissingFormInputErrorMessage"]',
            MissingFractionalOrWholeInputMessage: '@errorMessages["MissingFractionalOrWholeInputMessage"]',
            InvalidDecimalRangeErrorMessage: '@errorMessages["InvalidDecimalRangeErrorMessage"]',
            InvalidFractionErrorMessage: '@errorMessages["InvalidFractionErrorMessage"]',
            InvalidWholeQtyErrorMessage: '@errorMessages["InvalidWholeQtyErrorMessage"]'
        };
        // Parse the QtyFractionOptions from the JSON string
        var qtyFractionOptionsString = @Html.Raw(qtyFractionOptions);
        var qtyFractionOptions = JSON.parse(JSON.stringify(qtyFractionOptionsString));
        // Extract keys from QtyFractionOptions as valid fractions
        var fractionOptions = Object.keys(qtyFractionOptions);

        // Configure Knockout Validation plugin
        ko.validation.init({
            insertMessages: false,
            decorateElement: true,
            errorElementClass: 'error',
            parseInputAttributes: true,
            messagesOnModified: true,
        });

        // Register the QTY validation rule
        ko.validation.rules['validateqty'] = {
            validator: function (val, params) {

                debugger
                var qtyDecimal = ko.unwrap(val.QtyDecimal);
                var qtyWhole = ko.unwrap(val.QtyWhole);
                var qtyFraction = ko.unwrap(val.QtyFraction);

                if (!qtyDecimal && !qtyWhole && !qtyFraction) {
                    params.errorMessage = errorMessages.MissingFormInputErrorMessage;
                    return false;
                }

                if (qtyDecimal && (qtyDecimal < 0.001 || qtyDecimal > 9999.99)) {
                    params.errorMessage = errorMessages.InvalidDecimalRangeErrorMessage;
                    return false;
                }

                if (qtyFraction && !fractionOptions.includes(qtyFraction)) {
                    params.errorMessage = errorMessages.InvalidFractionErrorMessage;
                    return false;
                }

                if (qtyWhole && (qtyWhole < 1 || qtyWhole > 9999)) {
                    params.errorMessage = errorMessages.InvalidWholeQtyErrorMessage;
                    return false;
                }

                return true;
            },
            message: function (params) {
                return params.errorMessage;
            }
        };

        // Create Regex URL pattern, corresponding to server-side regex
        const ValidationConstants = {
            UrlPattern: /^(http(s)?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?(\/.*)?$/
        };
        // Register URL validation rule
        ko.validation.rules['url'] = {
            validator: function (val, validate) {
                if (!val || !validate) return true;
                return ValidationConstants.UrlPattern.test(val);
            },
            message: '@ImageInvalidErrorMessage'
        };

        ko.validation.registerExtenders();

        
        //Knockout Viewmodel definition, enabling two-way data binding (client-server side and vise-versa)
        function RecipeViewModel(data) {
            var self = this;

            function createIngredient(ingredient) {
                var qtyObservable = {
                    QtyDecimal: ko.observable(ingredient.Qty.QtyDecimal).extend({ required: false, validatable: true }),
                    QtyWhole: ko.observable(ingredient.Qty.QtyWhole).extend({ required: false, validatable: true }),
                    QtyFraction: ko.observable(ingredient.Qty.QtyFraction).extend({ required: false, validatable: true })
                };

                var isUsingFractionsForIngredient = ko.pureComputed(function () {
                    return ko.unwrap(qtyObservable.QtyDecimal) === null && (ko.unwrap(qtyObservable.QtyFraction) !== null || ko.unwrap(qtyObservable.QtyWhole) !== null);
                });


                return {
                    Name: ko.observable(ingredient.Name).extend({
                        required: {
                            message: '@RecipeIngredientNameRequiredErrorMessage'
                        },
                        validatable: true,
                        minLength: {
                            message: '@RecipeIngredientNameRangeErrorMessage',
                            params: '@RecipeIngredientNameMinLength'
                        },
                        maxLength: {
                            message: '@RecipeIngredientNameRangeErrorMessage',
                            params: '@RecipeIngredientNameMaxLength'
                        }
                    }),
                    Qty: ko.observable(qtyObservable).extend({
                        validatable: true,
                        validateqty: {
                            params: {
                                errorMessage: ko.observable('')
                            }
                        }
                    }),
                    MeasureId: ko.observable(ingredient.MeasureId).extend({
                        validatable: true,
                        required: {
                            message: '@MeasureRequiredErrorMessage'
                        }
                    }),
                    SpecificationId: ko.observable(ingredient.SpecificationId).extend({ validatable: true }),
                    isUsingFractionsForIngredient: isUsingFractionsForIngredient.extend({ validatable: true })
                };
            }

            self.Id = ko.observable(data.Id);

            self.Title = ko.observable(data.Title).extend({
                required: {
                    message: '@TitleRequiredErrorMessage'
                },
                minLength: {
                    message: '@TitleMinLengthErrorMessage',
                    params: '@TitleMinLength'
                },
                maxLength: {
                    message: '@TitleMaxLengthErrorMessage',
                    params: '@TitleMaxLength'
                }
            });

            self.Servings = ko.observable(data.Servings).extend({
                required: {
                    message: '@ServingsRequiredErrorMessage'
                },
                min: {
                    message: '@ServingsRangeErrorMessage',
                    params: '@ServingsMinValue'
                },
                max: {
                    message: '@ServingsRangeErrorMessage',
                    params: '@ServingsMaxValue'
                }
            });

            self.Description = ko.observable(data.Description).extend({
                minLength: {
                    message: '@DescriptionRangeErrorMessage',
                    params: '@DescriptionMinLength'
                },
                maxLength: {
                    message: '@DescriptionRangeErrorMessage',
                    params: '@DescriptionMaxLength'
                }
            });

            self.ImageUrl = ko.observable(data.ImageUrl).extend({
                required: {
                    message: '@ImageRequiredErrorMessage'
                },
                minLength: {
                    message: '@ImageRangeErrorMessage',
                    params: '@ImageUlrMinLength'
                },
                maxLength: {
                    message: '@ImageRangeErrorMessage',
                    params: '@ImageUlrMaxLength'
                },
                url: true
            });

            self.CookingTimeMinutes = ko.observable(data.CookingTimeMinutes).extend({
                required: {
                    message: '@CookingTimeRequiredErrorMessage'
                },
                min: {
                    message: '@CookingTimeRangeErrorMessage',
                    params: '@CookingTimeMinValue'
                },
                max: {
                    message: '@CookingTimeRangeErrorMessage',
                    params: '@CookingTimeMaxValue'
                }
            });

            self.RecipeCategoryId = ko.observable(data.RecipeCategoryId).extend({
                required: {
                    message: '@RecipeCategoryIdRequiredErrorMessage'
                }
            });

            self.Steps = ko.observableArray(ko.utils.arrayMap(data.Steps, function (step) {
                return {
                    Description: ko.observable(step.Description).extend({
                        validatable: true,
                        required: {
                            message: '@StepRequiredErrorMessage'
                        },
                        minLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMinLength'
                        },
                        maxLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMaxLength'
                        }
                    })
                };
            }));

            self.RecipeIngredients = ko.observableArray(ko.utils.arrayMap(data.RecipeIngredients, function (ingredient) {
                return createIngredient(ingredient);
            }));

            self.addStep = function () {
                var newStep = {
                    Description: ko.observable('').extend({
                        validatable: true,
                        required: {
                            message: '@StepRequiredErrorMessage'
                        },
                        minLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMinLength'
                        },
                        maxLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMaxLength'
                        }
                    })
                };              

                // Push the new step to the observableArray
                self.Steps.push(newStep);
            };

            self.removeStep = function (step) {
                if (self.Steps().length > 1) {
                    self.Steps.remove(step);
                } else {
                    toastr.error('@StepsRequiredErrorMessage');
                }
            };

            self.addIngredient = function () {
                var newIngredient = createIngredient({
                    Name: '',
                    Qty: { QtyDecimal: null, QtyWhole: null, QtyFraction: null },
                    MeasureId: '',
                    SpecificationId: ''
                });

                self.RecipeIngredients.push(newIngredient);
                ko.validation.group(newIngredient);
            };

            self.removeIngredient = function (ingredient) {
                if (self.RecipeIngredients().length > 1) {
                    self.RecipeIngredients.remove(ingredient);
                } else {
                    toastr.error('@IngredientsRequiredErrorMessage');
                }
            };

            self.submitForm = function () {
                // Validate the entire ViewModel
                self.errors = ko.validation.group(self);

                // Additional validation for steps and ingredients
                var stepsValid = self.Steps().length > 0;
                var ingredientsValid = self.RecipeIngredients().length > 0;

                // if (!stepsValid) {
                //     toastr.error('At least one step is required.');
                // }

                // if (!ingredientsValid) {
                //     toastr.error('At least one ingredient is required.');
                // }

                if (self.errors().length === 0 && stepsValid && ingredientsValid) {
                    var jsonData = ko.toJSON(self);
                    // Perform AJAX POST request
                    $.ajax({
                        url: '/Recipe/Edit',
                        type: 'POST',
                        contentType: 'application/json',
                        data: jsonData,
                        success: function (response) {
                            if (response.success && response.redirectUrl) {
                                toastr.success('Recipe edited successfully!');
                                window.location.href = response.redirectUrl;
                            }
                        },
                        error: function (xhr) {
                            debugger
                            if (xhr.status === 400) {
                                // Replace the form content with the response HTML
                                $('#edit-recipe').html(xhr.responseText);
                                // Reapply bindings since the form content was replaced
                                ko.applyBindings(viewModel, document.getElementById('edit-recipe'));
                            } else {
                                console.error('Error occurred while submitting form:', xhr.statusText);
                                alert('Error occurred while submitting form. Please try again later.');
                            }
                        }
                    });
                } else {
                    self.errors.showAllMessages();
                }

                return false; // Prevent the default form submission
            };

            // Initialize validation group
            self.errors = ko.validation.group(self);
        }

        // Initialize the ViewModel with the initial data
        var initialData = @Html.Raw(JsonConvert.SerializeObject(Model));
        ko.applyBindings(new RecipeViewModel(initialData));

    </script>
}
