@using Newtonsoft.Json
@model RecipeEditFormModel
@using static CookTheWeek.Common.GeneralApplicationConstants;
@using static CookTheWeek.Common.ValidationErrorMessages.RecipeIngredientQty;
@{
    ViewData["Title"] = "Edit Recipe";
    
    var headingModel = new PageHeadingViewModel
    {
        Subheading = ViewData["Title"]!.ToString(),

    };

    if (User.GetId() != string.Empty && !User.IsAdmin())
    {
        headingModel.HeadingSecondary = $"Edit {Model.Title}";
    }

    var qtyFractionOptions = JsonConvert.SerializeObject(QtyFractionOptions);
}
<div id="edit-recipe" class="card-container">
    <partial name="_HeadingPartial" model="headingModel" />
    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="recipe" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="true">Recipe Details</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="ingredients-tab" data-bs-toggle="tab" data-bs-target="#ingredients" type="button" role="tab" aria-controls="ingredients" aria-selected="false">Ingredients</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="instructions-tab" data-bs-toggle="tab" data-bs-target="#instructions" type="button" role="tab" aria-controls="instructions" aria-selected="false">Instructions</button>
                </li>
            </ul>
        </div>

        <div class="card-body">
            <form id="edit-recipe-form" method="post" asp-area="" asp-controller="Recipe" asp-action="EditJson">
                <input type="hidden" name="JsonData" data-bind="value: ko.toJSON($root)" />

                <!-- Bindings for Recipe Title, Description, Servings, etc. -->

                <div id="info-content" class="tab-content g-3">
                    <!-- TAB RECIPE DETAILS -->
                    <div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
                        <div class="row">
                            <div class="col col-12 col-md-8 col-xl-9 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Title</span>
                                    <input data-bind="value: Title" class="form-control" placeholder="Name it.." type="text">
                                </div>
                                <span class="small text-danger"></span>
                            </div>
                            <div class="col col-12 col-md-4 col-xl-3 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Servs</span>
                                    <select class="form-select" data-bind="value: Servings">
                                        <option value="">Choose</option>
                                        @foreach (var option in @Model.ServingsOptions!)
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    </select>
                                </div>
                                <span class="small text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-7 col-xl-8 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Description</span>
                                    <textarea data-bind="value: Description" rows="3" class="form-control" placeholder="What it is.."></textarea>
                                </div>
                                <span class="small text-danger"></span>
                            </div>
                            <div class="col col-12 col-md-5 col-xl-4 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Ready For</span>
                                    <input data-bind="value: CookingTimeMinutes" class="form-control" type="number">
                                </div>
                                <span class="small text-danger"></span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-6 col-xl-7 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Image URL</span>
                                    <input data-bind="value: ImageUrl" class="form-control" placeholder="Your fine URL here..." type="url">
                                </div>
                                <span class="small text-danger"></span>
                            </div>
                            <div class="col col-12 col-md-6 col-xl-5 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Meal Type</span>
                                    <select data-bind="value: RecipeCategoryId" class="form-select">
                                        <option value="">Choose</option>
                                        @foreach (var category in @Model.Categories!)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </select>
                                </div>
                                <span class="small text-danger"></span>
                            </div>

                        </div>
                    </div>
                    @*  TAB INSTRUCTIONS - ICOLLECTION OF STEPS *@
                    <div class="tab-pane fade" id="instructions" role="tabpanel" aria-labelledby="instructions-tab">
                        <div id="instructions-content" class="tab-content">
                            <div id="instructionsContainer" class="row g-3">
                                <div id="instructionsList" data-bind="foreach: Steps">
                                    @* USING KNOCKOUTJS DATA BINDING INSTEAD OF ASP-FOR BUILT IN MODEL BINDING *@
                                    <div class="row instructions-row align-items-center">
                                        <div class="col-11 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Step</span>
                                                <textarea class="form-control" data-bind="value: Description" rows="3" placeholder="Tell us how to cook.."></textarea>
                                            </div>
                                            <span class="small text-danger"></span> 
                                        </div>
                                        <div class="col-1 p-2">
                                            <div class="add-step-btn-container d-flex justify-content-center align-items-top adjust-btn-position">
                                                <button class="btn remove-btn btn-danger remove-step" type="button" data-bind="click: $parent.removeStep">
                                                    <i class="fa fa-minus" aria-hidden="true"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                   
                                </div>
                                <hr />
                                @* Add Step Btn *@
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a id="add-step" class="btn btn-outline-primary" type="button" data-bind="click: addStep">
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Step
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @* TAB RECIPE INGREDIENTS *@
                    <div class="tab-pane fade" id="ingredients" role="tabpanel" aria-labelledby="ingredients-tab">
                        <div id="ingredients-content" class="tab-content">
                            <div id="ingredientsContainer" class="row g-3">
                                <div id="ingredientList" data-bind="foreach: RecipeIngredients">
                                @* USING KNOCKOUTJS DATA BINDING *@
                                    <div class="row ingredient-row">
                                        <div class="col col-6 col-lg-4 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Ingredient</span>
                                                <input data-bind="value: Name" class="form-control ingredientName" type="text" autocomplete="off" >
                                                <div class="suggestionsList invisible">
                                                </div>
                                            </div>
                                            <span class="small text-danger"></span>
                                        </div>
                                        @* COMPLEX QUANTITY INPUT *@
                                        <div class="col col-6 col-lg-3 p-2 qty-row">

                                            @* DECIMAL INPUT *@
                                            <div class="decimal-qty-input input-group" data-bind="style: { display: Qty().QtyDecimal() ? 'flex' : 'none' }">
                                                <span class="input-group-text">Qty</span>
                                                <input class="form-control qty-decimal" data-bind="value: Qty().QtyDecimal" placeholder="0.00" />
                                            </div>
                                            <span class="small text-danger"></span>
                                            @* FRACTIONAL / WHOLE NUMBER INPUT *@
                                            <div class="fraction-qty-inputs input-group" data-bind="style: { display: Qty().QtyDecimal() ? 'none' : 'flex' }">
                                                <span class="input-group-text">Qty</span>
                                                <input data-bind="value: Qty().QtyWhole" class="form-control qty qty-whole" placeholder="0">
                                                <select data-bind="value: Qty().QtyFraction" class="form-select qty qty-fraction">
                                                    <option value="">Frac</option>
                                                    @foreach (var option in QtyFractionOptions)
                                                    {
                                                        <option value="@option.Key">@option.Key</option>
                                                    }
                                                </select>
                                            </div>                                                
                                            <span class="small text-danger"></span>
                                            @* INPUT SWITCHER *@
                                            <div class="form-check form-switch">
                                                <input class="form-check-input show-fraction-checkbox" type="checkbox" data-bind="checked: isUsingFractionsForIngredient">
                                                <label class="form-check-label">Use Fractions</label>
                                            </div>                                               
                                        </div>

                                        <div class="col col-5 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Unit</span>
                                                <select data-bind="value: MeasureId" class="form-select">
                                                    <option value="">Unit</option>
                                                    @foreach (var measure in @Model.RecipeIngredients!.First().Measures!)
                                                    {
                                                        <option value="@measure.Id">@measure.Name</option>
                                                    }
                                                </select>
                                            </div>
                                            <span class="small text-danger"></span>
                                        </div>
                                        <div class="col col-6 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Note</span>
                                                <select class="form-select" data-bind="value: SpecificationId">
                                                    <option value="">Type</option>
                                                    @foreach (var specification in Model.RecipeIngredients!.First().Specifications!)
                                                    {
                                                        <option value="@specification.Id">@specification.Description</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col col-1 p-2 d-flex justify-content-center align-items-top adjust-btn-position">
                                            <a data-bind="click: $parent.removeIngredient" class="btn remove-btn btn-danger remove-ingredient" type="button">
                                                <i class="fa fa-minus" aria-hidden="true"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <hr>
                                </div>
                                @* Add Ingredient Btn *@
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a data-bind="click: addIngredient" id="add-ingredient" class="btn btn-outline-primary" type="button">
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Ingredient
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col text-center pt-3 pb-2">
                    @* SUBMIT FORM BTN *@
                    <button form="edit-recipe-form" class="btn btn-success btn-lg" type="submit" >Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/qty-custom-validation.js"></script>
    <script>
        $(document).on('keyup', '.ingredientName', suggestWords);
        
        function suggestWords(event) {
            let inputValue = $(this).val();            
            let suggestionsContainer = this.parentNode.querySelector("div.suggestionsList");

            if (inputValue.length > 1) {
                $.ajax({
                    url: 'https://localhost:7279/api/recipeingredient/suggestions',
                    type: "get",
                    data: {
                        input: inputValue
                    },
                    dataType: 'json',
                    success: function (response) {
                        renderSuggestionResults(response, inputValue, suggestionsContainer, event.target);
                    }
                });
            } else {
                $(suggestionsContainer).empty();
            }
        }

        function renderSuggestionResults(results, search, container, inputForm) {
            // delete unordered list from previous search result
            $(container).empty();

            // get properties from input field
            let form_font = window.getComputedStyle(inputForm, null).getPropertyValue('font-size');
            let form_width = inputForm.offsetWidth;

            //set result list to same width less borders
            container.style.width = form_width.toString() + 'px';

            if (results.length > 0) {
                // create ul and set classes
                let ul = document.createElement('UL');
                ul.classList.add('list-group', 'mt-2');

                // create list of results and append to ul
                results.map(function (item) {

                    let a = document.createElement('A');
                    a.classList.add('autocomplete-result', 'list-group-item', 'p-1'); // autocomplete used for init click event, other classes are from bootstrap
                    a.style.fontSize = form_font;
                    a.href = "#";
                    a.setAttribute("id", item.id); // used for click-Event to fill the form

                    // see function below - marked search string in results
                    a.innerHTML = colorResults(item.name, search);

                    // add Eventlistener for chosen renderResults
                    a.addEventListener("click", function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        // get text from list item and set it into reffered form field
                        let ingredientName = item.name;

                        $(inputForm).val(ingredientName).trigger('change');
                        // TODO: add validation for already added ingredients

                        // after a result is chose, make the div with results invisible -> or after changing input content again,
                        // all of childs of current div will be deleted [line 48,49]
                        $(container).empty();
                        container.classList.add('invisible');

                    });
                    ul.append(a);
                });

                // append ul to container and make container visible
                container.append(ul);
                container.classList.remove('invisible');

            }
            else {
                container.classList.add('invisible');

            }
        }
        // create span's with colored marked search strings
        function colorResults(string, search) {
            let splitted = string.toLowerCase().split(search.toLowerCase());

            let sp = []; // array of all spans, created in folling loop
            let start = 0; //start for slicing

            splitted.map(function (element, index) {
                // empty string at the beginning
                if (element == false) {
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
                else if (index + 1 == splitted.length) {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                }
                else {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                    start = start + element.length;
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
            });
            return sp.join('')
        }

    </script>
    <script>
        $(document).ready(function () {            
            
            var form = $("#edit-recipe-form");

            // Parse the QtyFractionOptions from the JSON string
            var qtyFractionOptionsString = @Html.Raw(qtyFractionOptions);
            var qtyFractionOptions = JSON.parse(JSON.stringify(qtyFractionOptionsString));

            // Extract keys from QtyFractionOptions as valid fractions
            var fractionOptions = Object.keys(qtyFractionOptions);
           
            
            // Helper function to convert decimal to whole and fraction
            function decimalToFraction(decimal) {
                let whole = Math.floor(decimal);
                let fraction = decimal - whole;

                if (fraction > 0) {
                    let closestFraction = '';
                    let minDifference = Number.MAX_VALUE;

                    for (const [key, value] of Object.entries(qtyFractionOptions)) {
                        const difference = Math.abs(value - fraction);
                        if (difference < minDifference) {
                            minDifference = difference;
                            closestFraction = key;
                        }
                    }

                    fraction = closestFraction;
                }
                else {
                    fraction = '';
                }

                return { whole, fraction };
            }

            // Helper function to convert whole and fraction to decimal
            function fractionToDecimal(whole, fraction) {
                let fractionValue = qtyFractionOptions[fraction] || 0;
                return parseFloat(whole) + fractionValue;
            }    
           
            // Update fraction and decimal input fields upon "change input units" request
            form.on('change', '.show-fraction-checkbox', function (event) {
               debugger
                var ingredientLine = $(event.target).closest('.ingredient-row');
                var decimalQtyInput = ingredientLine.find('.decimal-qty-input');
                var fractionQtyInputs = ingredientLine.find('.fraction-qty-inputs');

                if ($(event.target).is(':checked')) {
                    // Convert decimal to whole and fraction and update the inputs
                    let decimalValue = parseFloat(decimalQtyInput.find('input').val()) || 0;
                    let { whole, fraction } = decimalToFraction(decimalValue);
                    //decimalQtyInput.find('input').rules('remove');
                    decimalQtyInput.find('input').val('');
                    decimalQtyInput.hide();

                    // Update the fraction input fields and add validation rules
                    fractionQtyInputs.show();
                    fractionQtyInputs.find('.qty-whole').val(whole);
                    fractionQtyInputs.find('.qty-fraction').val(fraction);
                  
                    
                } else {
                    // Convert whole and fraction to decimal and update the input
                    let wholeValue = parseInt(fractionQtyInputs.find('.qty-whole').val()) || 0;
                    let fractionValue = fractionQtyInputs.find('.qty-fraction').val();
                    let decimalValue = fractionToDecimal(wholeValue, fractionValue);

                    // Update the decimal input field
                    decimalQtyInput.show();
                    decimalQtyInput.find('input').val(decimalValue.toFixed(3));
                   
                    fractionQtyInputs.find('input, select').val('');
                    fractionQtyInputs.hide();
                }

                form.valid();
            });
        });
    </script>
    <script>
        //Knockout Viewmodel, taken from the server-side model, enabling two-way data binding
        // ViewModel definition
        function RecipeViewModel(data) {
            var self = this;
            self.Id = ko.observable(data.Id);
            self.Title = ko.observable(data.Title);
            self.Description = ko.observable(data.Description);
            self.Servings = ko.observable(data.Servings);
            self.CookingTimeMinutes = ko.observable(data.CookingTimeMinutes);
            self.ImageUrl = ko.observable(data.ImageUrl);
            self.RecipeCategoryId = ko.observable(data.RecipeCategoryId);

            self.Steps = ko.observableArray(ko.utils.arrayMap(data.Steps, function (step) {
                return {
                    Description: ko.observable(step.Description)
                };
            }));

            self.RecipeIngredients = ko.observableArray(ko.utils.arrayMap(data.RecipeIngredients, function (ingredient) {
                return {
                    Name: ko.observable(ingredient.Name),
                    Qty: ko.observable({
                        QtyDecimal: ko.observable(ingredient.Qty.QtyDecimal),
                        QtyWhole: ko.observable(ingredient.Qty.QtyWhole),
                        QtyFraction: ko.observable(ingredient.Qty.QtyFraction)
                    }),
                    MeasureId: ko.observable(ingredient.MeasureId),
                    SpecificationId: ko.observable(ingredient.SpecificationId),

                    // Method to determine if to show fractions or decimals for this ingredient
                    isUsingFractionsForIngredient: ko.pureComputed(function () {
                        return ko.unwrap(ingredient.Qty.QtyDecimal) === null || ko.unwrap(ingredient.Qty.QtyDecimal) === undefined;
                    })
                };
            }));
                        
            self.addStep = function () {
                self.Steps.push({ Description: ko.observable('') });
            };

            self.removeStep = function (step) {
                self.Steps.remove(step);
            };

            self.addIngredient = function () {
                self.RecipeIngredients.push({
                    Name: ko.observable(''),
                    Qty: ko.observable({
                        QtyDecimal: ko.observable(null),
                        QtyWhole: ko.observable(null),
                        QtyFraction: ko.observable(null)
                    }),
                    MeasureId: ko.observable(''),
                    SpecificationId: ko.observable(''),

                    // Method to determine if to show fractions or decimals for this ingredient
                    isUsingFractionsForIngredient: ko.pureComputed(function () {
                        return true; // Default to fractions
                    })
                });
            };

            self.removeIngredient = function (ingredient) {
                self.RecipeIngredients.remove(ingredient);
            };

            // Ensure the hidden field is updated with the JSON representation
            ko.computed(function () {
                document.querySelector('input[name="JsonData"]').value = ko.toJSON(self);
            });
        }

        // Initialize the ViewModel with the initial data
        var initialData = @Html.Raw(JsonConvert.SerializeObject(Model));
        ko.applyBindings(new RecipeViewModel(initialData));
       
    </script>
}
