@using CookTheWeek.Services.Data.Interfaces
@using CookTheWeek.Web.Infrastructure.Extensions
@inject IUserService UserService
@inject IFavouriteRecipeService FavouriteRecipeService
@model AllRecipesQueryModel
@{    
    string userId = User.GetId();
}

<div class="container-xl" style="max-width: 1200px;">

    <div class="row">        
        <p id="welcome-message" class="text-center">Browse Our Recipes section and craft your ideal meal plan by simply clicking 'Add to Meal Plan' on your favorite recipes. Let the journey begin as you customize your week with a delightful array of dishes, all at your command.</p>
     </div>
        
    <div class="row">
        <form id="all-recipes-form" method="get" class="pb-3">
            <div class="row justify-content-center justify-content-sm-between align-items-center gy-2">
                <div class="col-12 col-sm-6 col-md-4 col-lg-2 order-md-first">
                    <div class="input-group">
                        <span class="input-group-text">Type</span>
                        <select asp-for="Category" class="form-control">
                            <option value="">All</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col col-12 col-sm-6 col-md-4 col-lg-2 order-lg-3">
                    <div class="input-group">
                        <span class="input-group-text">Sort</span>
                        <select asp-for="RecipeSorting" class="form-control">
                            @foreach (var option in Model.RecipeSortings)
                            {
                                <option value="@option.Key">@option.Value</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-12 col-lg-5 order-4 order-md-2">
                    <div class="input-group">
                        <span class="input-group-text">Filter</span>
                        <input asp-for="SearchString" class="form-control" placeholder="..." />
                        <button type="submit" value="Search" class="btn btn-primary text-white" form="all-recipes-form">Search</button>
                    </div>
                </div>
                <div class="col col-12 col-sm-6 col-md-3 col-lg-2 order-lg-4">
                    <div class="input-group">
                        <span class="input-group-text">Per Pg</span>
                        <select asp-for="RecipesPerPage" class="form-control">
                            <option value="8">8</option>
                            <option value="12">12</option>
                            <option value="16">16</option>
                            <option value="20">20</option>
                            <option value="24">24</option>
                        </select>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <partial name="_BuildBtnPartial" />
    <div class="row">        
        <div class="container">
            @if (!Model.Recipes.Any())
            {
                <h2 class="text-center pt-5">No recipes found by the given criteria!</h2>
            }
            else
            {
                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-3"> 
                    @foreach (var recipe in Model.Recipes)
                    {
                        <partial name="_RecipeCardPartial" model="recipe"/>
                    }
                </div>
            }
        </div>
    </div>
        @{
            int previousPage = Model.CurrentPage - 1;
            if (previousPage < 1)
            {
                previousPage = 1;
            }

            int maxPage = (int)Math.Ceiling((double)Model.TotalRecipes / Model.RecipesPerPage);
        }
        <!-- Pagination buttons -->
        <nav aria-label="Page navigation" class="fixed-bottom">
            <ul class="pagination justify-content-center g-1">
                <li class="page-item">
                    <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
                       asp-controller="Recipe"
                       asp-action="All"
                       asp-route-currentPage="@previousPage"
                       asp-route-category="@Model.Category"
                       asp-route-searchTerm="@Model.SearchString"
                       asp-route-sorting="@((int)Model.RecipeSorting)">&lt;&lt;</a>
                </li>
                @{
                    bool shouldNextPageBeDisabled = Model.CurrentPage == maxPage ||
                    !Model.Recipes.Any();
                }
                <li class="page-item">
                    <a class="btn btn-primary
            @(shouldNextPageBeDisabled ? "disabled" : string.Empty)"
                       asp-controller="Recipe"
                       asp-action="All"
                       asp-route-currentPage="@(Model.CurrentPage + 1)"
                       asp-route-category="@Model.Category"
                       asp-route-searchTerm="@Model.SearchString"
                       asp-route-sorting="@((int)Model.RecipeSorting)">>></a>
                </li>
            </ul>
        </nav>  
</div>
@section Scripts {    
    <script>
        // Like btn functionality
        function toggleFavourites(event, recipeId, userId) {
            event.preventDefault();
            var $button = $(event.currentTarget);
            let url = 'https://localhost:7279/api/favouriteRecipe/toggleFavourites';

            var data = {
                RecipeId: recipeId,
                UserId: userId
            }
            
            $.ajax({
                url: url,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),

                success: function (response) {
                    // Handle success response
                    $button.find('i').toggleClass('liked-icon not-liked-icon');
                    toastr.success("Your preference is saved!");
                },
                error: function (xhr, status, error) {
                    // Handle error
                    if (xhr.status === 400) {
                        // Handle 400 Bad Request error
                        toastr.error('Bad Request: Please check your input and try again.');
                    } else {
                        // Display generic error message
                        toastr.error('Your preference not saved:', error);
                    }
                }
            });
        }
    </script>
    <script>
        $(function () {
            var submissionSuccess = @(TempData.ContainsKey("SubmissionSuccess") && TempData["SubmissionSuccess"] != null && (bool)TempData["SubmissionSuccess"] ? "true" : "false");

            if (submissionSuccess) {
                // Clear local storage if the form was submitted successfully
                eraseUserLocalStorage('@userId');
                showOrHideBuildMealPlanBtn('@userId');
                updateRecipeBtns();
                console.log("Successfully updated local storage for user");
            }

        });
    </script>

}





