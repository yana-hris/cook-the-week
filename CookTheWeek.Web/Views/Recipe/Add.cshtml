@using Newtonsoft.Json
@model RecipeAddFormModel
@using static CookTheWeek.Common.GeneralApplicationConstants;
@using static CookTheWeek.Common.EntityValidationConstants.Recipe;
@using static CookTheWeek.Common.EntityValidationConstants.RecipeIngredient;
@using static CookTheWeek.Common.EntityValidationConstants.Step;
@using static CookTheWeek.Common.EntityValidationConstants.RecipeIngredientQty;
@{
    ViewData["Title"] = "Add Recipe";

    // int nextIngredientIndex = Model.RecipeIngredients.Count;
    // int nextStepIndex = Model.Steps.Count;

    PageHeadingViewModel headingModel = new PageHeadingViewModel
    {
        Subheading = ViewData["Title"]!.ToString()

    };

    if (User.GetId() != string.Empty && !User.IsAdmin())
    {
        headingModel.HeadingSecondary = "Add your favorite recipe to your personal collection";
    }  

    var qtyFractionOptions = JsonConvert.SerializeObject(QtyFractionOptions);

    var errorMessages = new Dictionary<string, string>
    {
        { "MissingFormInputErrorMessage", MissingFormInputErrorMessage },
        { "MissingFractionalOrWholeInputMessage", MissingFractionalOrWholeInputMessage },
        { "InvalidDecimalRangeErrorMessage", InvalidDecimalRangeErrorMessage },
        { "InvalidFractionErrorMessage", InvalidFractionErrorMessage },
        { "InvalidWholeQtyErrorMessage", InvalidWholeQtyErrorMessage },
    };

    var serverErrorsString = TempData["ServerErrors"] != null
        ? JsonConvert.DeserializeObject<Dictionary<string, string[]>>(TempData["ServerErrors"].ToString())
        : new Dictionary<string, string[]>();
}

<div id="add-recipe" class="card-container">
    <partial name="_HeadingPartial" model="headingModel" />
    <div class="card">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="recipe" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="true">Recipe Details</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="ingredients-tab" data-bs-toggle="tab" data-bs-target="#ingredients" type="button" role="tab" aria-controls="ingredients" aria-selected="false">Ingredients</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="instructions-tab" data-bs-toggle="tab" data-bs-target="#instructions" type="button" role="tab" aria-controls="instructions" aria-selected="false">Instructions</button>
                </li>
            </ul>
        </div>
        
        <div class="card-body">
            <form id="add-recipe-form" method="post" data-bind="submit: submitForm" asp-area="" asp-controller="Recipe" asp-action="Add">
                <div id="info-content" class="tab-content g-3">
                    @* TAB RECIPE DETAILS *@
                    <div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
                        <div class="row">
                            <div class="col col-12 col-md-8 col-xl-9 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Title</span>
                                    <input 
                                        asp-for="Title"
                                        data-bind="value: Title, valueUpdate: 'afterkeydown'"
                                        class="form-control"
                                        placeholder="Name it.."
                                        type="text" />
                                </div>
                                <span class="small text-danger"
                                      data-bind="validationMessage: Title">
                                </span>
                            </div>
                            <div class="col col-12 col-md-4 col-xl-3 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Servs</span>
                                    <select 
                                        class="form-select" 
                                        asp-for="Servings"
                                        data-bind="value: Servings, valueUpdate: 'afterkeydown'">
                                        <option value="">Choose</option>
                                        @foreach (var option in @Model.ServingsOptions!)
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    </select>
                                </div>
                                <span data-bind="validationMessage: Servings"
                                      class="small text-danger">
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-7 col-xl-8 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Description</span>
                                    <textarea 
                                        asp-for="Description"
                                        data-bind="value: Description, valueUpdate: 'afterkeydown'"
                                        rows="3" 
                                        class="form-control" 
                                        placeholder="What it is.."></textarea>
                                </div>
                                <span class="small text-danger"
                                      data-bind="validationMessage: Description">
                                </span>
                            </div>
                            <div class="col col-12 col-md-5 col-xl-4 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Ready For</span>
                                    <input 
                                        asp-for="CookingTimeMinutes"
                                        data-bind="value: CookingTimeMinutes, valueUpdate: 'afterkeydown'"
                                        class="form-control"
                                        placeholder="minutes"
                                        />
                                </div>
                                <span data-bind="validationMessage: CookingTimeMinutes"
                                      class="small text-danger">
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col col-12 col-md-6 col-xl-7 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Image URL</span>
                                    <input 
                                        asp-for="ImageUrl"
                                        data-bind="value: ImageUrl, valueUpdate: 'afterkeydown'"
                                        class="form-control"
                                        placeholder="Your image link here..."
                                        type="url" />
                                </div>
                                <span 
                                    data-bind="validationMessage: ImageUrl"
                                    class="small text-danger">
                                </span>
                            </div>
                            <div class="col col-12 col-md-6 col-xl-5 p-2">
                                <div class="input-group">
                                    <span class="input-group-text">Meal Type</span>
                                    <select 
                                        asp-for="RecipeCategoryId"
                                        data-bind="value: RecipeCategoryId, valueUpdate: 'afterkeydown'"
                                        class="form-select">
                                        <option value="">Choose</option>
                                        @foreach (var category in @Model.Categories!)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </select>
                                </div>
                                <span data-bind="validationMessage: RecipeCategoryId"
                                      class="small text-danger">
                                </span>
                            </div>

                        </div>
                    </div>
                   @*  TAB INSTRUCTIONS *@                    
                    <div class="tab-pane fade" id="instructions" role="tabpanel" aria-labelledby="instructions-tab">
                        <div id="instructions-content" class="tab-content">
                            <div id="instructionsContainer" class="row g-3">
                                <div id="instructionsList" data-bind="foreach: Steps">
                                   
                                    <div class="row instructions-row align-items-center">
                                        <div class="col-11 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Step</span>
                                                <textarea data-bind="value: Description,
                                                                     attr: { name: 'Steps[' + $index() + '].Description' },
                                                                     deferValidation: Description,
                                                                     valueUpdate: 'afterkeydown'"
                                                          class="form-control" 
                                                          rows="3" placeholder="Tell us how to cook..">
                                                </textarea>
                                            </div>
                                            <span data-bind="validationMessage: Description"
                                                  class="small text-danger">
                                            </span>
                                        </div>
                                        <div class="col-1 p-2">
                                            <div class="add-step-btn-container d-flex justify-content-center align-items-top adjust-btn-position">
                                                <button class="btn remove-btn btn-danger remove-step" type="button" data-bind="click: $parent.removeStep">
                                                    <i class="fa fa-minus" aria-hidden="true"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                </div>
                                <hr />
                                @* Add Step Btn *@
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a id="add-step" class="btn btn-outline-primary" data-bind="click: addStep">
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Step
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @* TAB INGREDIENTS *@                    
                    <div class="tab-pane fade" id="ingredients" role="tabpanel" aria-labelledby="ingredients-tab">
                        <div id="ingredients-content" class="tab-content">
                            <div id="ingredientsContainer" class="row g-3">
                                <div id="ingredientList" data-bind="foreach: RecipeIngredients">
                                    <!-- USING KNOCKOUTJS DATA BINDING -->
                                    <div class="row ingredient-row">
                                        <div class="col col-6 col-lg-4 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Ingredient</span>
                                                <input data-bind="value: Name,
                                                                  validationElement: Name,
                                                                  attr: { name: 'RecipeIngredients[' + $index() + '].Name' },
                                                                  deferValidation: Name,
                                                                  valueUpdate: 'afterkeydown',
                                                                  validationRules: {
                                                                        required: {
                                                                            message: '@RecipeIngredientNameRequiredErrorMessage'
                                                                        },
                                                                        minLength: {
                                                                            message: '@RecipeIngredientNameRangeErrorMessage',
                                                                            params: parseInt('@RecipeIngredientNameMinLength', 10)
                                                                        },
                                                                        maxLength: {
                                                                            message: '@RecipeIngredientNameRangeErrorMessage',
                                                                            params: parseInt('@RecipeIngredientNameMaxLength', 10)
                                                                        }
                                                                    }"
                                                       class="form-control ingredientName"
                                                       type="text"
                                                       autocomplete="off" />
                                                <div class="suggestionsList invisible">
                                                </div>
                                            </div>
                                            <span data-bind="validationMessage: Name"
                                                  class="small text-danger">
                                            </span>
                                        </div>
                                        <!-- COMPLEX QUANTITY INPUT -->
                                        <div class="col col-6 col-lg-3 p-2 qty-row">
                                            <!--  DECIMAL INPUT -->
                                            <div class="decimal-qty-input" data-bind="style: { display: isUsingFractionsForIngredient() ? 'none' : 'block' }">
                                                <div class="input-group flex-inside">
                                                    <span class="input-group-text">Qty</span>
                                                    <input type="number"
                                                           data-val="true"
                                                           data-bind="value: Qty().QtyDecimal,
                                                                  validationElement: Qty().QtyDecimal,
                                                                  attr: { name: 'RecipeIngredients[' + $index() + '].Qty.QtyDecimal' },
                                                                  valueUpdate: 'afterkeydown'"
                                                           class="form-control qty-decimal"
                                                           placeholder="0.00" />
                                                </div>
                                                <span data-bind="validationMessage: Qty().QtyDecimal"
                                                      class="small text-danger">
                                                </span>
                                            </div>
                                            <!-- FRACTIONAL / WHOLE NUMBER INPUT -->
                                            <div data-bind="style: { display: isUsingFractionsForIngredient() ? 'block' : 'none' }"
                                                 class="fraction-qty-inputs">
                                                <div class="input-group flex-inside">
                                                    <span class="input-group-text">Qty</span>
                                                    <input type="number"
                                                           data-val="true"
                                                           data-bind="value: Qty().QtyWhole,
                                                                  validationElement: Qty().QtyWhole,
                                                                  attr: { name: 'RecipeIngredients[' + $index() + '].Qty.QtyWhole' },
                                                                  valueUpdate: 'afterkeydown'"
                                                           class="form-control qty qty-whole"
                                                           placeholder="0" />
                                                    <select data-val="true"
                                                            data-bind="value: Qty().QtyFraction,
                                                                   validationElement: Qty().QtyFraction,
                                                                   attr: { name: 'RecipeIngredients[' + $index() + '].Qty.QtyFraction' },
                                                                   valueUpdate: 'afterkeydown'"
                                                            class="form-select qty qty-fraction">
                                                        <option value="">Frac</option>
                                                        @foreach (var option in QtyFractionOptions)
                                                        {
                                                            <option value="@option.Key">@option.Key</option>
                                                        }
                                                    </select>
                                                </div>
                                                <span data-bind="validationMessage: Qty().QtyFraction" class="small text-danger"></span>
                                                <span data-bind="validationMessage: Qty().QtyWhole" class="small text-danger"></span>
                                            </div>
                                            <span data-bind="validationMessage: Qty" class="small text-danger"></span>
                                            <!-- INPUT SWITCHER -->
                                            <div class="form-check form-switch">
                                                <input data-bind="checked: isUsingFractionsForIngredient"
                                                       class="form-check-input show-fraction-checkbox"
                                                       type="checkbox" />
                                                <label class="form-check-label">Use Fractions</label>
                                            </div>
                                        </div>


                                        <div class="col col-5 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Unit</span>
                                                    <select 
                                                        name="RecipeIngredients[<span data-bind='text: $index()'></span>].MeasureId"
                                                        data-bind="value: MeasureId,
                                                                   validationElement: MeasureId,
                                                                   attr: { name: 'RecipeIngredients[' + $index() + '].MeasureId' },
                                                                   deferValidation: MeasureId,
                                                                   valueUpdate: 'afterkeydown',
                                                                   validationRules: {
                                                                                required: {
                                                                                    message: '@MeasureRequiredErrorMessage'
                                                                                }
                                                                            }"
                                                        class="form-select">
                                                        <option value="">Unit</option>
                                                        @foreach (var measure in @Model.RecipeIngredients!.First().Measures!)
                                                        {
                                                            <option value="@measure.Id">@measure.Name</option>
                                                        }
                                                    </select>
                                            </div>
                                            <span 
                                                data-bind="validationMessage: MeasureId"
                                                class="small text-danger">
                                            </span>
                                        </div>
                                        <div class="col col-6 col-lg-2 p-2">
                                            <div class="input-group">
                                                <span class="input-group-text">Note</span>
                                                <select 
                                                    data-bind="value: SpecificationId, 
                                                               attr: {name: 'RecipeIngredients[' + $index() + '].SpecificationId' },
                                                               valueUpdate: 'afterkeydown'"
                                                    class="form-select">
                                                    <option value="">Type</option>
                                                    @foreach (var specification in Model.RecipeIngredients!.First().Specifications!)
                                                    {
                                                        <option value="@specification.Id">@specification.Description</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col col-1 p-2 d-flex justify-content-center align-items-top adjust-btn-position">
                                            <a data-bind="click: $parent.removeIngredient"
                                               class="btn remove-btn btn-danger remove-ingredient">
                                                <i class="fa fa-minus" aria-hidden="true"></i>
                                            </a>
                                        </div>
                                    </div>
                                    
                                </div>
                                <hr />
                                @* Add Ingredient Btn *@
                                <div class="row justify-content-end pt-3 pb-2">
                                    <div class="col-6">
                                        <!-- Empty column to push the button to the end -->
                                    </div>
                                    <div class="col-6 text-end">
                                        <a data-bind="click: addIngredient"
                                           id="add-ingredient"
                                           class="btn btn-outline-primary"
                                           type="button">
                                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Add Ingredient
                                        </a>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col text-center pt-3 pb-2">
                    @* SUBMIT FORM BTN *@
                    <button 
                        form="add-recipe-form" 
                        class="btn btn-secondary card-btn-width" 
                        type="submit">Add Recipe
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.0/knockout-min.js" integrity="sha512-xXZWdp+Qu5oSyYvkV6tcCsw+LhXwBZAh8qhD6Ml44PhxjroiMjrLhP9wvvBnhHzkc9A9kLBWBZ6HGaqqtxNd5g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js" integrity="sha512-1LyBPWtezbX0LO4X4QzhfZd9jSetVu5W0IFpMV9ecq4lJUQBR6hx8uiNfUI2Aoe7LCF4rK1NV3rY+uil4VJ3QQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout-validation/2.0.4/knockout.validation.min.js" integrity="sha512-b99MDNv5TqiZtPKH2UeHzDAVydmgrOJEPtaPPEF8AgV86eYyqINFI/K7/7f0+R4WNTAVv8KvvpjwfOYHv5rd5g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        $(document).on('keyup', '.ingredientName', suggestWords);

        function suggestWords(event) {
           
            let inputValue = $(this).val();
            let suggestionsContainer = this.parentNode.querySelector("div.suggestionsList");

            if (inputValue.length > 1) {
                $.ajax({
                    url: 'https://localhost:7279/api/recipeingredient/suggestions',
                    type: "get",
                    data: {
                        input: inputValue
                    },
                    dataType: 'json',
                    success: function (response) {
                        renderSuggestionResults(response, inputValue, suggestionsContainer, event.target);
                    }
                });
            } else {
                $(suggestionsContainer).empty();
            }
        }
        function renderSuggestionResults(results, search, container, inputForm) {
            // delete unordered list from previous search result
            $(container).empty();
            
            // get properties from input field
            let form_font = window.getComputedStyle(inputForm, null).getPropertyValue('font-size');
            let form_width = inputForm.offsetWidth;

            //set result list to same width less borders
            container.style.width = form_width.toString() + 'px';

            if (results.length > 0) {
                // create ul and set classes
                let ul = document.createElement('UL');
                ul.classList.add('list-group', 'mt-2');

                // create list of results and append to ul
                results.map(function (item) {

                    let a = document.createElement('A');
                    a.classList.add('autocomplete-result', 'list-group-item', 'p-1'); // autocomplete used for init click event, other classes are from bootstrap
                    a.style.fontSize = form_font;
                    a.href = "#";
                    a.setAttribute("id", item.id); // used for click-Event to fill the form

                    // see function below - marked search string in results
                    a.innerHTML = colorResults(item.name, search);

                    // add Eventlistener for chosen renderResults
                    a.addEventListener("click", function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        // get text from list item and set it into reffered form field
                        let ingredientName = a.innerText;

                        $(inputForm).val(ingredientName).trigger('change');

                        // after a result is chose, make the div with results invisible -> or after changing input content again,
                        // all of childs of current div will be deleted [line 48,49]
                        $(container).empty(); // NOT SURE!
                        container.classList.add('invisible');

                    });
                    ul.append(a);
                });

                // append ul to container and make container visible
                container.append(ul);
                container.classList.remove('invisible');

            }
            else {
                container.classList.add('invisible');

            }
        }
        // create span's with colored marked search strings
        function colorResults(string, search) {
            let splitted = string.toLowerCase().split(search.toLowerCase());

            let sp = []; // array of all spans, created in folling loop
            let start = 0; //start for slicing

            splitted.map(function (element, index) {
                // empty string at the beginning
                if (element == false) {
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
                else if (index + 1 == splitted.length) {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                }
                else {
                    sp.push("<span>" + string.slice(start, start + element.length) + "</span>");
                    start = start + element.length;
                    sp.push("<span class='text-success'>" + string.slice(start, start + search.length) + "</span>");
                    start = start + search.length;
                }
            });
            return sp.join('')
        }
    
    </script>
    
    <script>
        $(document).ready(function () {

            var form = $("#add-recipe-form");

            // Parse the QtyFractionOptions from the JSON string
            var qtyFractionOptionsString = @Html.Raw(qtyFractionOptions);
            var qtyFractionOptions = JSON.parse(JSON.stringify(qtyFractionOptionsString));

            // Extract keys from QtyFractionOptions as valid fractions
            var fractionOptions = Object.keys(qtyFractionOptions);


            // Helper function to convert decimal to whole and fraction
            function decimalToFraction(decimal) {
                let whole = Math.floor(decimal);
                let fraction = decimal - whole;

                if (fraction > 0) {
                    let closestFraction = '';
                    let minDifference = Number.MAX_VALUE;

                    for (const [key, value] of Object.entries(qtyFractionOptions)) {
                        const difference = Math.abs(value - fraction);
                        if (difference < minDifference) {
                            minDifference = difference;
                            closestFraction = key;
                        }
                    }

                    fraction = closestFraction;
                }
                else {
                    fraction = '';
                }

                return { whole, fraction };
            }

            // Helper function to convert whole and fraction to decimal
            function fractionToDecimal(whole, fraction) {
                let fractionValue = qtyFractionOptions[fraction] || 0;
                return parseFloat(whole) + fractionValue;
            }

            // Update fraction and decimal input fields upon "change input units" request
            form.on('change', '.show-fraction-checkbox', function (event) {

                var ingredientLine = $(event.target).closest('.ingredient-row');
                var decimalQtyInput = ingredientLine.find('.decimal-qty-input');
                var fractionQtyInputs = ingredientLine.find('.fraction-qty-inputs');

                if ($(event.target).is(':checked')) {
                    // Convert decimal to whole and fraction and update the inputs
                    let decimalValue = parseFloat(decimalQtyInput.find('input').val()) || 0;
                    let { whole, fraction } = decimalToFraction(decimalValue);

                    decimalQtyInput.find('input').val('');
                    decimalQtyInput.hide();

                    // Update the fraction input fields and add validation rules
                    fractionQtyInputs.show();
                    // Make sure zero values are not inserted in the nput fields during conversion
                    if(whole !== 0) {
                        fractionQtyInputs.find('.qty-whole').val(whole);
                    }
                    fractionQtyInputs.find('.qty-fraction').val(fraction);


                } else {
                    // Convert whole and fraction to decimal and update the input
                    let wholeValue = parseInt(fractionQtyInputs.find('.qty-whole').val()) || 0;
                    let fractionValue = fractionQtyInputs.find('.qty-fraction').val();
                    let decimalValue = fractionToDecimal(wholeValue, fractionValue);

                    // Update the decimal input field
                    decimalQtyInput.show();
                    // Make sure zero values are not inserted into the input fields if no user input
                    if(decimalValue !== 0.000) {
                        decimalQtyInput.find('input').val(decimalValue.toFixed(3));
                    }

                    fractionQtyInputs.find('input, select').val('');
                    fractionQtyInputs.hide();
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            const errorMessages = {
                MissingFormInputErrorMessage: '@errorMessages["MissingFormInputErrorMessage"]',
                MissingFractionalOrWholeInputMessage: '@errorMessages["MissingFractionalOrWholeInputMessage"]',
                InvalidDecimalRangeErrorMessage: '@errorMessages["InvalidDecimalRangeErrorMessage"]',
                InvalidFractionErrorMessage: '@errorMessages["InvalidFractionErrorMessage"]',
                InvalidWholeQtyErrorMessage: '@errorMessages["InvalidWholeQtyErrorMessage"]'
            };

            // Parse the QtyFractionOptions from the JSON string
            var qtyFractionOptionsString = @Html.Raw(qtyFractionOptions);
            var qtyFractionOptions = JSON.parse(JSON.stringify(qtyFractionOptionsString));

            // Extract keys from QtyFractionOptions as valid fractions
            const fractionOptions = Object.keys(qtyFractionOptions);
            
            // Create Regex URL pattern, corresponding to server-side regex
            const ValidationConstants = {
                UrlPattern: /^(http(s)?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?(\/.*)?$/
            };
            // Register URL validation rule
            ko.validation.rules['url'] = {
                validator: function (val, validate) {
                    if (!val || !validate) return true;
                    return ValidationConstants.UrlPattern.test(val);
                },
                message: '@ImageInvalidErrorMessage'
            };

            // Knockout validation extender to handle server errors
            ko.extenders.setError = function (target, options) {
                target.hasError = ko.observable(false);
                target.validationMessage = ko.observable();

                target.setError = function (message) {
                    target.hasError(true);
                    target.validationMessage(message);
                };

                target.clearError = function () {
                    target.hasError(false);
                    target.validationMessage('');
                };

                // Automatically update `validationMessage` when Knockout Validation's `error` changes
                target.subscribe(function () {
                    var error = target.error;
                    if (error && error()) {
                        target.setError(error());
                    } else {
                        target.clearError();
                    }
                });

                return target;
            };

            ko.validation.registerExtenders();

            // Initialize the ViewModel with the initial data
            const initialData = @Html.Raw(JsonConvert.SerializeObject(Model));
            console.log(initialData);
            const serverErros = @Html.Raw(JsonConvert.SerializeObject(serverErrorsString));

            var viewModel = new RecipeViewModel(initialData, serverErros);

            // // Configure Knockout Validation plugin
            ko.validation.init({
                insertMessages: false,
                decorateElement: false,
                errorElementClass: 'error',
                parseInputAttributes: true,
                messagesOnModified: true,
                errorMessageClass: "small text-danger",
            });

            ko.applyBindings(viewModel);
            console.log(viewModel);

            //Knockout Viewmodel definition, enabling two-way data binding
            function RecipeViewModel(data, serverErrors) {

                var self = this;                          

                self.Title = ko.observable(data.Title).extend({
                    required: {
                        message: '@TitleRequiredErrorMessage'
                    },
                    minLength: {
                        message: '@TitleMinLengthErrorMessage',
                        params: '@TitleMinLength'
                    },
                    maxLength: {
                        message: '@TitleMaxLengthErrorMessage',
                        params: '@TitleMaxLength'
                    },
                    validatable: true
                }).extend({ setError: true });

                self.Description = ko.observable(data.Description).extend({
                    minLength: {
                        message: '@DescriptionRangeErrorMessage',
                        params: '@DescriptionMinLength'
                    },
                    maxLength: {
                        message: '@DescriptionRangeErrorMessage',
                        params: '@DescriptionMaxLength'
                    },
                    validatable: true
                }).extend({ setError: true });

                self.Servings = ko.observable(data.Servings ? data.Servings : '').extend({
                    required: {
                        message: '@ServingsRequiredErrorMessage'
                    },
                    min: {
                        message: '@ServingsRangeErrorMessage',
                        params: '@ServingsMinValue'
                    },
                    max: {
                        message: '@ServingsRangeErrorMessage',
                        params: '@ServingsMaxValue'
                    },
                    validatable: true
                }).extend({ setError: true });

                self.CookingTimeMinutes = ko.observable(data.CookingTimeMinutes ? data.CookingTimeMinutes : '').extend({
                    required: {
                        message: '@CookingTimeRequiredErrorMessage'
                    },
                    min: {
                        message: '@CookingTimeRangeErrorMessage',
                        params: '@CookingTimeMinValue'
                    },
                    max: {
                        message: '@CookingTimeRangeErrorMessage',
                        params: '@CookingTimeMaxValue'
                    },
                    validatable: true
                }).extend({ setError: true });

                self.ImageUrl = ko.observable(data.ImageUrl).extend({
                    required: {
                        message: '@ImageRequiredErrorMessage'
                    },
                    minLength: {
                        message: '@ImageRangeErrorMessage',
                        params: '@ImageUlrMinLength'
                    },
                    maxLength: {
                        message: '@ImageRangeErrorMessage',
                        params: '@ImageUlrMaxLength'
                    },
                    url: true,
                    validatable: true
                }).extend({ setError: true });

                self.RecipeCategoryId = ko.observable(data.RecipeCategoryId ? data.RecipeCategoryId : '').extend({
                    required: {
                        message: '@RecipeCategoryIdRequiredErrorMessage'
                    },
                    validatable: true
                }).extend({ setError: true });

                self.Steps = ko.observableArray(ko.utils.arrayMap(data.Steps, function (step) {
                    return new createStep(step);
                }));

                self.RecipeIngredients = ko.observableArray(ko.utils.arrayMap(data.RecipeIngredients, function (ingredient) {
                    return new createIngredient(ingredient);
                }));

                function createStep(newStep) {

                    let self = this;

                    self.Description = ko.observable(newStep.Description ? newStep.Description : '').extend({
                        required: {
                            message: '@StepRequiredErrorMessage'
                        },
                        minLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMinLength'
                        },
                        maxLength: {
                            message: '@StepDescriptionRangeErrorMessage',
                            params: '@StepDescriptionMaxLength'
                        },
                        validatable: true,
                    }).extend({ setError: true });

                    return self;
                };

                self.addStep = function () {
                    let newStep = new createStep({
                        Description: '',
                    });

                    self.Steps.push(newStep);
                };

                self.removeStep = function (step) {
                    if (self.Steps().length > 1) {
                        self.Steps.remove(step);
                    } else {
                        toastr.error('@StepsRequiredErrorMessage');
                    }
                };

                self.addIngredient = function () {
                    let newIngredient = new createIngredient({
                        Name: '',
                        Qty: { QtyDecimal: '', QtyWhole: '', QtyFraction: '' },
                        MeasureId: '',
                        SpecificationId: ''
                    });

                    self.RecipeIngredients.push(newIngredient);
                };

                self.removeIngredient = function (ingredient) {

                    if (self.RecipeIngredients().length > 1) {
                        self.RecipeIngredients.remove(ingredient);
                    } else {
                        toastr.error('@IngredientsRequiredErrorMessage');
                    }
                };

                // Initialize the server errors in the view model
                self.ServerErrors = serverErrors;

                // Function to apply server-side errors to the client-side model
                self.applyServerErrors = function () {
                    debugger;
                    for (const propertyName in self.ServerErrors) {

                        const errorsArr = self.ServerErrors[propertyName];
                        console.log(propertyName, errorsArr.join("\r\n"));

                        if (self.ServerErrors.hasOwnProperty(propertyName)) {
                            var observable = self;
                            var path = propertyName.split(/[.\[\]]+/).filter(Boolean);

                            for (var i = 0; i < path.length; i++) {

                                // retrieve the value of the observable wanted if it exists
                                if (ko.isObservable(observable)) {
                                    observable = observable();
                                }

                                // check if the value is a number and the observable - an array
                                if (!isNaN(parseInt(path[i], 10)) && Array.isArray(observable)) {

                                    observable = observable[parseInt(path[i], 10)];

                                } else if (observable[path[i]]) {

                                    observable = observable[path[i]];

                                } else {

                                    console.warn(`Path ${path[i]} not found in ViewModel`);
                                    observable = null;
                                    break;
                                }
                            }

                            if (observable && ko.isObservable(observable) && observable.setError) {
                                observable.setError(errorsArr.join("\r\n"));
                            }
                        }
                    }
                };

                // Apply the server errors if any
                if (self.ServerErrors) {
                    self.applyServerErrors();
                };
                // Initialize validation group
                self.errors = ko.validation.group(self, { deep: true, observable: true });

                self.submitForm = function () {
                    // Validate the entire ViewModel
                    debugger;
                    var clientSideErrors = self.errors();

                    console.log(self.errors());
                    console.log(self);

                    // Additional validation for steps and ingredients
                    const stepsValid = self.Steps().length > 0;
                    const ingredientsValid = self.RecipeIngredients().length > 0;

                    if (!stepsValid) {
                        toastr.error('At least one step is required.');
                    }

                    if (!ingredientsValid) {
                        toastr.error('At least one ingredient is required.');
                    }

                    if (self.errors().length === 0 && stepsValid && ingredientsValid) {
                        debugger;
                        return true; // Allow form submission
                    } else {
                        debugger;
                        self.errors.showAllMessages();
                        return false; // Prevent form submission
                    }
                };

                return self;

                function createIngredient(ingredient) {

                    let ingredientSelf = this;

                    ingredientSelf.Name = ko.observable(ingredient.Name).extend({
                        required: {
                            message: '@RecipeIngredientNameRequiredErrorMessage'
                        },
                        minLength: {
                            message: '@RecipeIngredientNameRangeErrorMessage',
                            params: '@RecipeIngredientNameMinLength'
                        },
                        maxLength: {
                            message: '@RecipeIngredientNameRangeErrorMessage',
                            params: '@RecipeIngredientNameMaxLength'
                        },
                        validatable: true,

                    }).extend({ setError: true });

                    ingredientSelf.Qty = ko.observable(new createQtyObservable(ingredient.Qty ? ingredient.Qty : {QtyDecimal: '', QtyFraction: '', QtyWhole: ''}))
                        .extend({ validatable: true })
                        .extend({ setError: true });

                    ingredientSelf.MeasureId = ko.observable(ingredient.MeasureId ? ingredient.MeasureId : '').extend({
                        required: {
                            message: '@MeasureRequiredErrorMessage'
                        },
                        validatable: true
                    }).extend({ setError: true });

                    ingredientSelf.SpecificationId = ko.observable(ingredient.SpecificationId ? ingredient.SpecificationId : '')
                        .extend({ validatable: true })
                        .extend({ setError: true });

                    ingredientSelf.isUsingFractionsForIngredient = ko.computed(function () {

                        let qty = ingredientSelf.Qty();
                        if (qty) {
                            return (!qty.QtyDecimal() && (qty.QtyFraction() || qty.QtyWhole()));
                        }
                        return false;
                    }).extend({ validatable: true })
                      .extend({ setError: true });

                    return ingredientSelf;
                };

                function createQtyObservable(qty) {

                    let qtySelf = this;

                    if (qty) {
                        qtySelf.QtyDecimal = ko.observable(qty.QtyDecimal);
                        qtySelf.QtyWhole = ko.observable(qty.QtyWhole);
                        qtySelf.QtyFraction = ko.observable(qty.QtyFraction);
                    } else {
                        qtySelf.QtyDecimal = ko.observable('');
                        qtySelf.QtyWhole = ko.observable('');
                        qtySelf.QtyFraction = ko.observable('');
                    }

                    qtySelf.QtyDecimal.extend({
                        required: {
                            onlyIf: function () { return (!qtySelf.QtyWhole() && !qtySelf.QtyFraction()) },
                            message: errorMessages.MissingFormInputErrorMessage
                        },
                        min: {
                            message: errorMessages.InvalidDecimalRangeErrorMessage,
                            params: 0.001
                        },
                        max: {
                            message: errorMessages.InvalidDecimalRangeErrorMessage,
                            params: 9999.99
                        },
                        validatable: true
                    });

                    qtySelf.QtyWhole.extend({
                        required: {
                            onlyIf: function () {
                                return (!qtySelf.QtyDecimal() || isNaN(qtySelf.QtyDecimal())) && !qtySelf.QtyFraction();
                            },
                            message: errorMessages.MissingFormInputErrorMessage
                        },
                        min: {
                            message: errorMessages.InvalidWholeQtyErrorMessage,
                            params: 1
                        },
                        max: {
                            message: errorMessages.InvalidWholeQtyErrorMessage,
                            params: 9999
                        },
                        validatable: true
                    });

                    qtySelf.QtyFraction.extend({
                        validation: {
                            validator: function (val) {
                                return val ? fractionOptions.includes(val) : true;
                            },
                            message: errorMessages.InvalidFractionErrorMessage
                        },
                        validatable: true
                    });

                    return qtySelf;
                };

            }

        });
    </script>
    
 }