@model AllRecipesFilteredAndPagedViewModel
@inject IUserContext UserContext
@using static CookTheWeek.Common.GeneralApplicationConstants
@{

    Guid userId = UserContext.UserId;
    bool hasActiveMealplan = UserContext.HasActiveMealplan;

    var headingModel = new PageHeadingViewModel
            {
                Subheading = "Quick Dinners",
                HeadingSecondary = "Get inspiration and save time"
            };
}

<div class="wide-contents-container has-build-btn">
    <partial name="_HeadingPartial" model="headingModel" />

    <!-- Search and Filter panel -->
    <div class="row text-center filter-container">
        <form id="all-recipes-form" method="get" class="pb-1">
            @Html.AntiForgeryToken()
            <div class="row align-items-center justify-content-between g-0 gy-3">
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 order-md-first ps-sm-3 ps-md-0">
                    <div class="input-group">
                        <span class="input-group-text">Difficulty</span>
                        <select asp-for="DifficultyLevel" class="form-select">
                            <option value="">All</option>
                            @foreach (var level in Model.DifficultyLevels)
                            {
                                <option value="@level.Id">@level.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col col-12 col-sm-6 col-md-4 col-lg-2 order-lg-3">
                    <div class="input-group">
                        <span class="input-group-text">Sort</span>
                        <select asp-for="RecipeSorting" class="form-select">
                            @foreach (var criteria in Model.RecipeSortings)
                            {
                                <option value="@criteria.Id">@criteria.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-12 col-lg-4 order-first order-md-2">
                    <div class="input-group">
                        <span class="input-group-text">Filter</span>
                        <input asp-for="SearchString" class="form-control search" placeholder="Search for recipes or ingredients" />
                        <button type="submit" value="Search" class="search-btn" form="all-recipes-form">&rarr;</button>
                    </div>
                </div>
                <div class="col col-12 col-sm-6 col-md-3 col-lg-2 order-lg-4 ps-sm-3 ps-md-0">
                    <div class="input-group">
                        <span class="input-group-text">Per Pg</span>
                        <select asp-for="RecipesPerPage" class="form-select">
                            @foreach (var perPage in PerPageOptions)
                            {
                                <option value="@perPage">@perPage</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <partial name="_BuildBtnPartial" />

    <!-- Recipes Container -->
    <div class="row">
        <div class="container">
            <!-- Swiper Container -->
            <div class="swiper-container">
                <div class="swiper-wrapper">
                    @foreach (var recipe in Model.Recipes)
                    {
                        <!-- Each Recipe Card as a Slide -->
                        <div class="swiper-slide">
                            <partial name="_RecipeCardPartial" model="recipe" />
                        </div>
                    }
                </div>
                <!-- Swiper Navigation Buttons -->
                <div class="swiper-button-next"></div>
                <div class="swiper-button-prev"></div>
            </div>
        </div>
    </div>

    @{
        int previousPage = Model.CurrentPage - 1;
        if (previousPage < 1)
        {
            previousPage = 1;
        }

        int maxPage = (int)Math.Ceiling((double)Model.TotalResults / Model.RecipesPerPage);
        bool shouldDisplayPagination = Model.CurrentPage > 1 || Model.CurrentPage < maxPage;
    }
    <!-- Pagination buttons -->
    @if (shouldDisplayPagination)
    {
        <div aria-label="Page navigation" id="pagination-buttons">
            <ul class="pagination d-flex justify-content-end align-items-center">
                <li class="page-item">
                    <a class="pagination-btn @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
                       asp-controller="Recipe"
                       asp-action="All"
                       asp-route-currentPage="@previousPage"
                       asp-route-category="@Model.MealTypeId"
                       asp-route-searchTerm="@Model.SearchString"
                       asp-route-sorting="@((int)Model.RecipeSorting)"
                       aria-disabled="@(Model.CurrentPage == 1 ? true : false)">
                        <i class="fa-solid fa-angles-left"></i>
                    </a>
                </li>
                @{
                    bool shouldNextPageBeDisabled = Model.CurrentPage == maxPage ||
                    !Model.Recipes.Any();
                }
                <li class="page-item">
                    <a class="pagination-btn @(shouldNextPageBeDisabled ? "disabled" : string.Empty)"
                       asp-controller="Recipe"
                       asp-action="All"
                       asp-route-currentPage="@(Model.CurrentPage + 1)"
                       asp-route-category="@Model.MealTypeId"
                       asp-route-searchTerm="@Model.SearchString"
                       asp-route-sorting="@((int)Model.RecipeSorting)"
                       aria-disabled="@(shouldNextPageBeDisabled ? true : false)">
                        <i class="fa-solid fa-angles-right"></i>
                    </a>
                </li>
            </ul>
        </div>
    }
    <!-- Modal -->
    <partial name="_WelcomeModalPartial" model="@Model.ActiveMealPlan" />
</div>

@section Scripts {
    <script type="module">
        import { initializeSwiper } from '/js/site.js';
        import { attachToggleFavouritesHandler } from '/js/recipeLikes.js';

        $(document).ready(function () {
            initializeSwiper();

            debugger;
            attachToggleFavouritesHandler();
        });
    </script>

}





