@model RecipeAllViewModel
@inject IUserService UserService
@inject IFavouriteRecipeService FavouriteRecipeService
@using CookTheWeek.Services.Data.Interfaces
@using static CookTheWeek.Common.GeneralApplicationConstants
@{
    string recipeId = Model.Id.ToString();
    string userId = this.User.GetId();
    bool isOwner = await this.UserService.IsOwnerByRecipeId(recipeId, userId);
    bool isAdmin = User.IsAdmin();
}

<div class="col recipe-container">
    <div class="card">
        <div class="position-relative image-container">
            <img class="card-img-top" alt="Recipe Image" src="@Model.ImageUrl">
            @if (!string.IsNullOrEmpty(userId) && !isOwner)
            {
                bool isLiked = await this.FavouriteRecipeService.ExistsByUserIdAsync(recipeId, userId);

                <a class="add-to-favourites-button" onclick="toggleFavourites(event, '@recipeId', '@userId')">
                    @if (isLiked)
                    {
                        <i class="fa fa-heart liked-icon"></i>
                    }
                    else
                    {
                        <i class="fa fa-heart not-liked-icon"></i>
                    }
            </a>
            } else if(isOwner && !isAdmin)
            {
                <i class="fas fa-tag"></i>
            }
            @if(userId != String.Empty)
            {
                <div class="add-to-mealplan-container">
                    <a data-recipeId="@Model.Id" class="add-to-mealplan-button plus">
                        <i class="fa fa-plus" aria-hidden="true"></i>
                    </a>
                </div>
            }            
        </div>
        <div class="card-body p-2">
            <p class="card-title"><span class="badge @GetBadgeColor(Model.Category.Name)">@Model.Category.Name</span></p>
                <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center justify-content-center g-1"><i class="material-icons card-icon">restaurant_menu</i><span class="icon-text">&nbsp; @Model.Servings</span></div>
                <div class="d-flex align-items-center justify-content-center g-1"><i class="material-icons card-icon">timer</i><span class="icon-text">&nbsp; @Model.CookingTime</span></div>
                </div>
                @{
                    int titleLength = Model.Title.Length;
                    string shortTitle = "";
                    if(titleLength > RecipeCardTitleMaxLength)
                    {
                        shortTitle = Model.Title.Substring(0, RecipeCardTitleMaxLength) + "..";
                    <p class="recipe-title">@shortTitle</p>
                    }
                    else
                    {
                        <p class="recipe-title">@Model.Title</p>
                    }
                 }
                <hr/>
                @if (Model.Description != null)
                {
                <div class="recipe-description">
                    @{
                        int initialLength = Model.Description.Length;
                        string shortDescription = "";
                        if(initialLength > RecipeCardDescriptionMaxLength)
                        {
                            shortDescription = Model.Description.Substring(0, RecipeCardDescriptionMaxLength) + "..";
                            <p class="card-text text-overflow-clamp">@shortDescription</p>
                        }
                        else
                        {
                            <p class="card-text text-overflow-clamp">@Model.Description</p>
                        }
                    }
                    
                </div>
                }
                 @if (!string.IsNullOrEmpty(userId)) // && is not already added
                {
                <div class="card-btns d-flex justify-content-center align-content-center">                    
                    <a class="btn btn-outline-success" asp-area="" asp-controller="Recipe" asp-action="Details" asp-route-id="@Model.Id" type="button">View</a>
                </div>
                }
        </div>
    </div>
</div>
@functions {
    public string GetBadgeColor(string mealCategoryName)
    {
        switch (mealCategoryName)
        {
            case "Breakfast":
                return "bg-primary";
            case "Soup":
                return "bg-warning text-dark";
            case "Salad":
                return "bg-success";
            case "Main Dish":
                return "bg-warning text-dark";
            case "Appetizer":
                return "bg-danger";
            case "Dessert":
                return "bg-secondary text-dark";
            default:
                return "bg-primary";
        }
    }
}
